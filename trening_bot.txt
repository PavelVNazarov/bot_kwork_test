Структура проекта

/telegram_bot/
│
├── bot.py                # Основной файл бота
├── config.py             # Файл конфигурации с токеном
├── handlers.py           # Обработчики команд и сообщений
├── subscription.py       # Логика проверки подписки
├── exercises.py          # Логика работы с упражнениями
├── video_manager.py      # Логика управления видео
└── requirements.txt
Изменения в коде

config.py

# config.py
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'  # Токен бота
CHANNEL_ID = '@your_channel_id'      # ID канала для проверки подписки


subscription.py

# subscription.py
from telegram import Update
from telegram.ext import CallbackContext
from config import CHANNEL_ID

def check_subscription(update: Update) -> bool:
    user = update.effective_user
    chat_member = update.effective_chat.get_member(user.id)
    return chat_member.status in ['member', 'administrator']

# ... существующий код ...


exercises.py

# exercises.py
from telegram import Update
from telegram.ext import CallbackContext

exercises = {
    'Спина': ['Упражнение 1', 'Упражнение 2'],
    'Руки': ['Упражнение 3', 'Упражнение 4'],
    # ... другие категории ...
}

def get_exercise_video(category: str, exercise: str) -> str:
    # Логика получения видео по категории и упражнению
    return f"video_url_for_{exercise}"

# ... существующий код ...

video_manager.py

# video_manager.py
import json

VIDEO_DATA_FILE = 'video_data.json'

def load_video_data():
    try:
        with open(VIDEO_DATA_FILE, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_video_data(data):
    with open(VIDEO_DATA_FILE, 'w') as file:
        json.dump(data, file)

def add_video(category: str, video_url: str):
    data = load_video_data()
    if category not in data:
        data[category] = []
    data[category].append(video_url)
    save_video_data(data)

# ... существующий код ...

Объяснение изменений
Файл конфигурации (config.py): Добавлен файл для хранения токена бота и ID канала.
Логика проверки подписки (subscription.py): Обновлена функция для проверки подписки на канал.
Логика работы с упражнениями (exercises.py): Добавлена функция для получения видео по категории и упражнению.
Управление видео (video_manager.py): Добавлена логика для загрузки и сохранения видео в JSON-файл, а также функция для добавления видео в категории.
Теперь Вы можете добавлять видео в различные категории, редактируя файл video_data.json.


bot.py

import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from config import TOKEN
from handlers import start, help_command, select_exercise

# Настройка логирования
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # Обработчики команд
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("select_exercise", select_exercise))

    # Запуск бота
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()



config.py

# Файл конфигурации с токеном
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'  # Замените на Ваш токен


handlers.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from subscription import check_subscription
from exercises import get_exercise_categories

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if check_subscription(user_id):
        update.message.reply_text("Добро пожаловать! Используйте /select_exercise для выбора упражнения.")
    else:
        update.message.reply_text("Пожалуйста, подпишитесь на наш канал, чтобы получить доступ к материалам.")

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text("Используйте /select_exercise для выбора упражнения.")

def select_exercise(update: Update, context: CallbackContext):
    categories = get_exercise_categories()
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat) for cat in categories]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("Выберите категорию упражнения:", reply_markup=reply_markup)


subscription.py

def check_subscription(user_id):
    # Логика проверки подписки на канал
    # Здесь должна быть реализация проверки подписки
    return True  # Замените на реальную проверку


exercises.py

def get_exercise_categories():
    return ["Спина", "Руки", "Грудь", "Ноги", "Плечи"]

def get_exercise_video(category, exercise):
    # Логика получения видео по категории и упражнению
    return f"Видео для {exercise} из категории {category}"


video_manager.py

def add_video_to_category(category, video_url):
    # Логика добавления видео в категорию
    # Здесь можно реализовать сохранение видео в файл или базу данных
    pass


requirements.txt

python-telegram-bot==13.7


Объяснение изменений:
bot.py: Основной файл, который запускает бота и настраивает обработчики команд.
config.py: Хранит токен бота для удобства.
handlers.py: Обработчики команд, включая проверку подписки и выбор упражнений.
subscription.py: Логика проверки подписки на канал.
exercises.py: Логика работы с категориями упражнений и получением видео.
video_manager.py: Функция для добавления видео в категории, которую можно расширить в будущем.


# config.py
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHANNEL_ID = '@your_channel_id'  # ID Вашего канала

# video_manager.py
import json

VIDEO_DATA_FILE = 'videos.json'

def load_videos():
    try:
        with open(VIDEO_DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_video(category, exercise, video_url):
    videos = load_videos()
    if category not in videos:
        videos[category] = {}
    videos[category][exercise] = video_url
    with open(VIDEO_DATA_FILE, 'w') as f:
        json.dump(videos, f)

def get_video(category, exercise):
    videos = load_videos()
    return videos.get(category, {}).get(exercise)

# subscription.py
import requests
from config import CHANNEL_ID

def check_subscription(user_id):
    url = f'https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={CHANNEL_ID}&user_id={user_id}'
    response = requests.get(url)
    return response.json().get('result', {}).get('status') == 'member'

# handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from video_manager import get_video
from subscription import check_subscription

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        update.message.reply_text("Пожалуйста, подпишитесь на наш канал, чтобы получить доступ к материалам.")
        return
    show_main_menu(update)

def show_main_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("Выбор упражнения", callback_data='select_exercise')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('Добро пожаловать! Выберите опцию:', reply_markup=reply_markup)

def select_exercise(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("Спина", callback_data='back')],
        [InlineKeyboardButton("Руки", callback_data='arms')],
        [InlineKeyboardButton("Грудь", callback_data='chest')],
        [InlineKeyboardButton("Ноги", callback_data='legs')],
        [InlineKeyboardButton("Плечи", callback_data='shoulders')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text('Выберите категорию упражнений:', reply_markup=reply_markup)

def show_exercise_video(update: Update, context: CallbackContext):
    category = update.callback_query.data
    exercise = context.user_data.get('selected_exercise')
    video_url = get_video(category, exercise)
    if video_url:
        update.callback_query.edit_message_text(f'Вот видео для {exercise}: {video_url}')
    else:
        update.callback_query.edit_message_text('Видео не найдено.')

# bot.py
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from config import TOKEN

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(select_exercise, pattern='select_exercise'))
    dp.add_handler(CallbackQueryHandler(show_exercise_video, pattern='^(back|arms|chest|legs|shoulders)$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()


